library;
import self as self;
import "dart:core" as core;

abstract class Base extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
}
class Foo extends self::Base {
  constructor •() → void
    : super self::Base::•()
    ;
}
class Bar extends self::Base {
  constructor •() → void
    : super self::Base::•()
    ;
}
class Baz extends self::Base {
  constructor •() → void
    : super self::Base::•()
    ;
}
static method foo(dynamic/self::Foo x) → void/bottom {}
static method bar(dynamic/self::Bar x) → void/bottom {}
static method foo_escaped(dynamic/core::Object x) → void/bottom {}
static method bar_escaped(dynamic/core::Object x) → void/bottom {}
static method escape(dynamic/core::Function fn) → void/bottom {
  fn.call(new self::Baz::•());
}
static method main() → dynamic/bottom {
  self::foo(new self::Foo::•());
  self::bar(new self::Bar::•());
  self::escape(self::foo_escaped);
  self::escape(self::bar_escaped);
}
